---
import type {
  GetStaticPaths,
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  MarkdownInstance,
} from "astro";
import BlogPost from "../../components/BlogPost.astro";
import BlogLayout from "../../layouts/BlogLayout.astro";

export const getStaticPaths = (async () => {
  const allPosts: MarkdownInstance<{
    title: string;
    tags?: string[];
    url: string;
  }>[] = await Astro.glob("../posts/*.md");

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => {
      if (!post.frontmatter.tags) return false;
      return tag !== undefined && post.frontmatter.tags.includes(tag);
    });
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts } = Astro.props as Props;
---

<BlogLayout title={tag ?? "Daniel Cabral Blog"}>
  <p>Posts tagged with {tag}</p>

  <ul>
    {
      posts.map((post) => (
        <BlogPost url={post.url ?? "#"} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BlogLayout>
